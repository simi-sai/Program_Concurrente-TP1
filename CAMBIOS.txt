CAMBIOS EN CODIGO/LOGICA:
1) Hemos realizado una limpieza de métodos, cambiamos a todos los métodos synchronized y los reemplazamos por bloques synchronized utilizando de lock el asiento correspondiente y en algunos metodos tambien utilizamos bloques con la lista utilizada de lock (para evitar conflictos). Ahora la clase Asiento no posee ningun bloque o metodo sincronizado y solo será accedida mediante la clase Registros para el control de los Asientos.
2) En la clase Registros hubo varios cambios, dentro de esta en cada bloque synchronized de cada metodo se utilizará la lista como lock, esto es asi para evitar conflictos con la lista a la hora de ser modificada, aparte de esto los mayores cambios se encuentran dentro de los siguientes metodos:
- En el metodo "get_reserva()", al entrar, los hilos preguntarán si la lista a tratar correspondiente está vacia, en caso afirmativo los hilos cederán el lock mediante el uso de wait(), y se quedaran esperando a futuro aviso. Estos serán despertados al momento en que otro hilo agregue mas elementos a la lista y avise utilizando notifyAll. (Esta pregunta se encuentra dentro de un bloque while(), esto es debido a que al tener la posibilidad de que haya mas de 1 hilo esperando al mismo objeto, estos al ser notificados "correran" a acceder al objeto, y en caso de haber perdido deberá checkear de nuevo la condición).
- En el metodo "registrar_reserva()", ahora al momento de agregar una reserva a las listas "pendientes/confirmadas" avisará a todos los hilos que estén esperando al objeto lista correspondiente mediante notifyAll().
- En el metodo "eliminar_reserva()", ahora el metodo retorna un valor booleano (lo utilizamos para evitar problemas de duplicación en caso de que haya salido algo mal a la hora de eliminar un asiento, esto ya no ocurre luego de todos los cambios pero lo dejamos por las dudas).
 - Incluyendo esos cambios hubo otros realizados para quitar interacción con la clase Asiento, ahora solo Registros puede acceder a esta, estos cambios fueron 2 nuevos metodos y cambios minimos de código destinados a cambiar y ver el estado del asiento y la flag checked.
3) Dentro de las clases etapas no hubo cambios significativos, en las clases etapaPago, etapaValidacion, etapaVerificacion se agregó un metodo privado para obtener el tamaño de la lista a trabajar (pendientes en caso de etapaPago y confirmadas en las otras dos etapas), este metodo retorna un booleano que se utiliza para dormir o no a los hilos (previo a empezar a realizar cambios) y en caso de que la condicion se siga cumpliendo, se finalizará el hilo.
4) Cambiamos los tiempos de Iteración de cada hilo correspondiente a cada etapa, estos cambios fueron testeados y elegimos el mejor (estos test se encuentran dentro del informe).

Recapitulando: Ahora las etapas poseen un solo bloque synchronized cada una utilizando de lock al asiento a tratar, donde dentro realizan las acciones necesarias. Dentro de la clase Registros los metodos tienen bloques synchronized utilizando de lock las listas correspondientes a cada tipo de reserva posible (esto para evitar conflictos), tambien se incorporaron los wait() y notifyAll() para evitar conflictos al encontrarse con las listas vacias y permitir que el lock se libere mientras otros hilos esperan. Se cambiaron los tiempos de iteración y se agregaron algunos metodos en distintas clases.
Aclaración: Teniendo en cuenta los cambios, podemos hablar de que hay escenarios en que tendremos 2 bloques synchronized encimados, esto no es un error, debido a que ambos utilizan distintos locks, en las etapas se lockea por Asiento, mientras que dentro de Registros se lockea por lista (esto se ve mas claro dentro del diagrama de secuencias).

CAMBIOS EN DIAGRAMAS:
1) Realizamos las correcciones correspondientes al Diagrama de Clases:
- Sumamos los metodos nuevos, cambiando los valores de return, los nombres de las variables, los valores iniciales, etc.
- Agregamos las flechas faltantes y cambiamos el sentido de las flechas de Main al resto de las etapas (este ultimo cambio se hizo verificando la habilidad de main de utilizar los metodos publicos de las etapas, se usó previamente una flecha al paquete "tareas" pero no permitia comprobar esto, por eso se decidió utilizar al resto de las flechas).
- También se marcaron las clases Thread como activas (doble franja).
2) Realizamos las correcciones correspondientes al Diagrama de Secuencias: 
- Cambiamos la gran mayoria del diagrama debido al cambio en la logica del codigo. 
- Ahora todas las actividades que ejecutan los hilos se encuentran encerradas por un bloque PAR para indicar que pueden llegar a ocurrir de manera paralela. 
- Tambien se agregó al final el join() de Main con el hilo de estadisticas, demostrando que el programa finaliza al morir el hilo de estadistica.